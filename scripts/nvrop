#!/bin/bash
set -e
# 检查lock.json，确定是否需要构建，更新lock.json

lock_file="lock.json"

check_update() {
  package_top_dir="packages"
  for subdir in "$package_top_dir"/*/; do
    # 检查是否是目录
    if [ -d "$subdir" ]; then
      package_name="$(basename "$subdir")"
      spec_file="${subdir}/${package_name}.spec"

      # 如果存在SPEC文件
      if [[ -f "$spec_file" ]]; then
        # SPEC中的VR
        get_V="$(grep Version "$spec_file" | tr -s ' ' | cut -d ' ' -f2)"
        get_R="$(grep Release "$spec_file" | tr -s ' ' | cut -d ' ' -f2)"
    
        # lock.json中的VR
        # 最终需要双引号引用包名，以正确解析短横线
        lock_V="$(jq -r '."'"$package_name"'".version' lock.json)"
        lock_R="$(jq -r '."'"$package_name"'".release' lock.json)"

        # 如果lock.json和实际的值不符
        if [[ "$get_V" != "$lock_V" || "$get_R" != "$lock_R" ]]; then
          # 第一次出现需要构建的包时，创建构建标记和update.json
          if [[ -z "$IS_SET_NEED_BUILD" ]]; then
            echo "NEED_BUILD=true" >> "$GITHUB_ENV"
            IS_SET_NEED_BUILD=true
            # 创建update.json
            echo '{}' > update.json
          fi

          # 将任务写入update.json
          local name="$package_name"
          local version="$get_V"
          local release="$get_R"
          jq --arg name "$name" --arg version "$version" --arg release "$release" \
            '.[$name] = {"version": $version, "release": $release}' update.json > temp.json && mv temp.json update.json
        fi
      # 如果不存在SPEC文件
      else
        echo "$spec_file 不存在，跳过"
      fi
    
    fi
  done
}

write_update() {
  file="update.json"
  # 遍历顶级键
  for name in $(jq -r 'keys[]' "$file"); do
    # 提取 version 和 release
    version=$(jq -r --arg name "$name" '.[$name].version' "$file")
    release=$(jq -r --arg name "$name" '.[$name].release' "$file")
  
    # 将更新写入lock.json
    jq --arg name "$name" --arg version "$version" --arg release "$release" \
      '.[$name] = {"version": $version, "release": $release}' lock.json > temp.json && mv temp.json lock.json
  done
}


if [[ "$1" == "check" ]]; then
  check_update
  if [[ "$IS_SET_NEED_BUILD" == "true" ]]; then
    echo "▶️ 需要构建rpm"
    cat update.json
  else
    echo "✅ 无需构建rpm"
  fi
elif [[ "$1" == "update" ]]; then
  write_update
else
  echo "❌ 错误的参数：$@"
  exit 1
fi
