#!/usr/bin/env bash
set -euo pipefail

usage() {
    echo "📜 Usage: $0 -p <project_directory>"
    exit 1
}

# Parse arguments
while getopts ":p:" opt; do
    case $opt in
        p)
            PROJECT_DIR="$OPTARG"
            ;;
        *)
            usage
            ;;
    esac
done

# Check required parameter
if [[ -z "${PROJECT_DIR:-}" ]]; then
    usage
fi

# Ensure project and source directories exist
mkdir -p "$PROJECT_DIR/source"

# Locate config file (prefer config.yaml over config.yml)
CONFIG_FILE=""
if [[ -f "$PROJECT_DIR/config.yaml" ]]; then
    CONFIG_FILE="$PROJECT_DIR/config.yaml"
elif [[ -f "$PROJECT_DIR/config.yml" ]]; then
    CONFIG_FILE="$PROJECT_DIR/config.yml"
else
    echo "❌ Error: No config.yaml or config.yml found in $PROJECT_DIR"
    exit 1
fi

echo "📄 Using config file: $CONFIG_FILE"

# Check if yq is installed
if ! command -v yq >/dev/null 2>&1; then
    echo "❌ Error: 'yq' is required to parse YAML"
    echo "💡 Install: https://github.com/mikefarah/yq"
    exit 1
fi

# Check if .source exists in config
if ! yq eval '.source' "$CONFIG_FILE" >/dev/null 2>&1 || [[ "$(yq eval '.source' "$CONFIG_FILE")" == "null" ]]; then
    echo "ℹ️ No '.source' field found in config, skipping download."
    exit 0
fi

# Get number of items in .source
count=$(yq eval '.source | length' "$CONFIG_FILE")
if [[ "$count" -eq 0 ]]; then
    echo "ℹ️ '.source' list is empty, nothing to download."
    exit 0
fi

# Loop through each source entry
for i in $(seq 0 $((count - 1))); do
    name=$(yq -r ".source[$i].name" "$CONFIG_FILE")
    url=$(yq -r ".source[$i].url" "$CONFIG_FILE")
    sha256sum_expected=$(yq -r ".source[$i].sha256sum" "$CONFIG_FILE")

    if [[ -n "$name" && -n "$url" && -n "$sha256sum_expected" && "$name" != "null" ]]; then
        dest="$PROJECT_DIR/source/$name"
        echo "⬇️ Downloading: $url -> $dest"
        curl -L --fail -o "$dest" "$url"

        echo "🔍 Verifying SHA256..."
        sha256sum_actual=$(sha256sum "$dest" | awk '{print $1}')
        if [[ "$sha256sum_actual" == "$sha256sum_expected" ]]; then
            echo "✅ Checksum OK: $name"
        else
            echo "❌ Checksum FAILED: $name"
            echo "   Expected: $sha256sum_expected"
            echo "   Actual:   $sha256sum_actual"
            rm -f "$dest"
            exit 1
        fi
    else
        echo "⚠️ Skipping entry $i: missing name/url/sha256sum"
    fi
done

echo "🎉 All downloads completed successfully."
