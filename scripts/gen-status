#!/usr/bin/env bash
set -e
# generate list.json based on multiple repodata dirs

while getopts ":r:o:" opt; do
  case $opt in
    r) REPO_ROOT=$OPTARG ;;
    o) OUTPUT=$OPTARG ;;
    ?)
      echo "Usage: $0 -r LOCAL_ABSOLUTE_PATH -o OUTPUT" >&2
      exit 1
      ;;
  esac
done

if [[ -z $REPO_ROOT || -z $OUTPUT ]] ; then
  echo "Error: Option is required" >&2
  echo "Usage: $0 -r LOCAL_ABSOLUTE_PATH -o OUTPUT" >&2
  exit 1
fi

test -e "$OUTPUT" && rm -v "$OUTPUT"

TMPFILE=$(mktemp)

# looking for things like $REPO_ROOT/fedora/42/repodata
find "$REPO_ROOT" -mindepth 3 -maxdepth 3 -type d -name repodata | while read -r repodata_dir; do
    branch_dir=$(dirname "$repodata_dir")
    branch=$(basename "$branch_dir")
    distro=$(basename "$(dirname "$branch_dir")")

    echo "Processing distro=$distro branch=$branch"

    dnf --repofrompath=localrepo,"file://$branch_dir" \
        --setopt=localrepo.enabled=1 \
        --setopt=localrepo.gpgcheck=0 \
        --setopt=localrepo.repo_gpgcheck=0 \
        --setopt=localrepo.type=rpm-md \
        --refresh \
        repoquery --repo=localrepo \
        --queryformat "{\"%{name}\":[{\"version\":\"%{version}\", \"release\":\"%{release}\", \"distro\":\"$distro\", \"branch\":\"$branch\"}]}" >> "$TMPFILE"
done

# Merge all JSON fragments
jq -s 'reduce .[] as $item ({};
    reduce ($item | to_entries[]) as $kv (.;
        .[$kv.key] += ($kv.value // [])))' "$TMPFILE" > "$OUTPUT"

rm -f "$TMPFILE"

echo "write '$OUTPUT'"
