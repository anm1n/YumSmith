name: Update metadata of yum repo
on:
  workflow_call:
    inputs:
      rclone-repo-name:
        description: "Section name of the remote storage in Rclone"
        required: false
        type: string
        default: remote
      tools-repo:
        description: "A github repository with tools and schema, this public repository is used by default"
        type: string
        required: false
        default: anm1n/YumSmith

    secrets:
      RCLONE_CONFIG_SECTION:
        description: "The contents of the rclone configuration file, encoded in base64"
        required: true
      GPG_SECRET:
        description: "GPG private key for signing, encoded in base64"
        required: true
      TOKEN:
        description: "PAT for use when checkout tool repositories, defaults to GITHUB_TOKEN automatically generated by the workflow"
        required: false

jobs:
  job1:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.tools-repo }}
          path: tools
          fetch-depth: 1
          token: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}

      - name: Install GPG, createrepo
        run: |
          sudo apt update
          sudo apt install -y gpg createrepo-c dnf

      - name: Cache prebuild Rclone deb
        uses: actions/cache@v4
        with:
          path: rclone.deb
          key: rclone-deb-1.71.0

      - name: Install Rclone
        run: |
          if [ ! -f rclone.deb ]; then
            curl -o rclone.deb https://downloads.rclone.org/v1.71.0/rclone-v1.71.0-linux-amd64.deb
          fi

          echo '53e35eac5cb5e6e4a9cc04ffe28d5ace695fd335a156f8d17b11df37739b725f  rclone.deb' | sha256sum -c
          sudo dpkg -i rclone.deb
          mkdir -vp ~/.config/rclone

      - name: Pull yum repo
        env:
          RCLONE_CONFIG_VAL: ${{ secrets.RCLONE_CONFIG_SECTION }}
          RCLONE_REPO_NAME: ${{ inputs.rclone-repo-name }}
        run: |
          echo "$RCLONE_CONFIG_VAL" | base64 -d > ~/.config/rclone/rclone.conf
          mkdir -v copy
          rclone copy ${RCLONE_REPO_NAME}:/ copy/ --progress
          shred -u ~/.config/rclone/rclone.conf

      - name: Import GPG key
        id: import-key
        env:
          GPG_SECRET: ${{ secrets.GPG_SECRET }}
        run: |
          echo ">>> Importing GPG key"
          echo "$GPG_SECRET" | base64 -d | gpg --import --batch --yes
          FINGERPRINT=$(gpg --list-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')
          echo ">>> Fingerprint: $FINGERPRINT"
          echo "id=$FINGERPRINT" >> $GITHUB_OUTPUT

      - name: Generate yum repodata, also sign repomd.xml
        env:
          GPG_SECRET_ID: ${{ steps.import-key.outputs.id }}
        run: |
          tools/scripts/gen-repodata -r copy -s "$GPG_SECRET_ID"
          gpg --batch --yes --delete-secret-keys "$GPG_SECRET_ID"

      - name: Generate status.json
        run: |
          tools/scripts/gen-status -r "$(pwd)/copy" -o copy/status.json
          cat copy/status.json

      - name: Push metadata
        env:
          RCLONE_CONFIG_VAL: ${{ secrets.RCLONE_CONFIG_SECTION }}
          RCLONE_REPO_NAME: ${{ inputs.rclone-repo-name }}
        run: |
          echo "$RCLONE_CONFIG_VAL" | base64 -d > ~/.config/rclone/rclone.conf
          rclone sync copy/ ${RCLONE_REPO_NAME}:/ --progress
          shred -u ~/.config/rclone/rclone.conf

      - name: Clean environment
        if: always()
        env:
          GPG_SECRET_ID: ${{ steps.import-key.outputs.id }}
        run: |
          test -e ~/.config/rclone/rclone.conf && shred -u ~/.config/rclone/rclone.conf
          gpg --batch --yes --delete-secret-keys "$GPG_SECRET_ID" || true
