name: Auto build RPMs
on:
  workflow_call:
    inputs:
      root-dir:
        description: "Parent directory containing the project directory"
        required: true
        type: string
      hooks-dir:
        description: "Directory containing hooks"
        required: true
        type: string
      matrix-file:
        description: "YAML files for distributions and images"
        required: true
        type: string
      metadata-workflow-name:
        description: "The name of a subworkflow that can be dispatched to update metadata"
        required: true
        type: string
      hostname:
        description: "The hostname used in the build container"
        required: true
        type: string

      rclone-repo-name:
        description: "Section name of the remote storage in Rclone"
        required: false
        type: string
        default: remote
      build-srpm:
        description: "Whether to build SRPM"
        required: false
        type: boolean
        default: false
      tools-repo:
        description: "A github repository with tools and schema, this public repository is used by default"
        type: string
        required: false
        default: anm1n/YumSmith

    secrets:
      RCLONE_CONFIG_SECTION:
        description: "The contents of the rclone configuration file, encoded in base64"
        required: true
      GPG_SECRET:
        description: "GPG private key for signing, encoded in base64"
        required: true
      TOKEN:
        description: "PAT for use when checkout tool repositories, defaults to GITHUB_TOKEN automatically generated by the workflow"
        required: false

jobs:
  prepare:
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - name: Checkout tools repository
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.tools-repo }}
          path: tools
          fetch-depth: 1
          token: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}

      - name: Checkout SPECs repository
        uses: actions/checkout@v5
        with:
          path: specs
          fetch-depth: 1

      - name: Cache prebuild Rclone deb
        uses: actions/cache@v4
        with:
          path: rclone.deb
          key: rclone-deb-1.71.0

      - name: Setup Rclone
        run: |
          if [ ! -f rclone.deb ]; then
            curl -o rclone.deb https://downloads.rclone.org/v1.71.0/rclone-v1.71.0-linux-amd64.deb
          fi

          echo '53e35eac5cb5e6e4a9cc04ffe28d5ace695fd335a156f8d17b11df37739b725f  rclone.deb' | sha256sum -c
          sudo dpkg -i rclone.deb
          mkdir -vp ~/.config/rclone

      - name: Pull status.json
        env:
          RCLONE_CONFIG_SECTION: ${{ secrets.RCLONE_CONFIG_SECTION }}
          RCLONE_REPO_NAME: ${{ inputs.rclone-repo-name }}
        run: |
          echo "$RCLONE_CONFIG_SECTION" | base64 -d > ~/.config/rclone/rclone.conf

          if rclone ls ${RCLONE_REPO_NAME}:/status.json > /dev/null ; then
            rclone copy ${RCLONE_REPO_NAME}:/status.json .
          else
            echo "Warn: status.json not exist on $RCLONE_REPO_NAME"
            echo "Warn: will rebuild everything"
            echo '{}' > status.json
          fi

          shred -u ~/.config/rclone/rclone.conf

      - name: Setup ajv-cli
        run: |
          npm install -g ajv-cli

      - name: Validate yaml, status.json
        run: |
          # 1. matrix.yml
          ajv validate -s tools/schema/matrix.json  -d specs/${{ inputs.matrix-file }} --errors=text

          # 2. config.yaml/config.yml
          for project_dir in "specs/${{ inputs.root-dir }}"/*; do
            if [ -d "$project_dir" ]; then
              project_name=$(basename "$project_dir")

              # Priority: config.yaml > config.yml
              config_file=""
              if [ -f "$project_dir/config.yaml" ]; then
                config_file="$project_dir/config.yaml"
              elif [ -f "$project_dir/config.yml" ]; then
                config_file="$project_dir/config.yml"
              fi

              if [ -z "$config_file" ]; then
                echo "Skipping project $project_name: config.yaml or config.yml not found"
                continue
              fi

              echo "Validating $config_file"
              ajv validate -s tools/schema/config.json  -d $config_file --errors=text
            fi
          done

          # 3. status.json
          ajv validate -s tools/schema/spec.json  -d status.json --errors=text

      - name: Gen spec.json
        run: |
          tools/scripts/gen-spec -o spec.json -r specs/${{ inputs.root-dir }} -m specs/${{ inputs.matrix-file }}
          cat spec.json
          ajv validate -s tools/schema/spec.json  -d spec.json --errors=text

      - name: Gen diff.json
        run: |
          tools/scripts/gen-diff spec.json status.json > diff.json
          cat diff.json
          ajv validate -s tools/schema/spec.json  -d diff.json --errors=text

      - name: Gen matrix
        id: gen-matrix
        run: |
          tools/scripts/gen-matrix -d diff.json -r specs/${{ inputs.root-dir }} -m specs/${{ inputs.matrix-file }} > matrix-include.json
          cat matrix-include.json
          ajv validate -s tools/schema/matrix-include.json  -d matrix-include.json --errors=text

          echo "matrix<<__EOF___" >> $GITHUB_OUTPUT
          cat matrix-include.json >> $GITHUB_OUTPUT
          echo "__EOF___" >> $GITHUB_OUTPUT


  build:
    needs: prepare
    if: ${{ join(fromJson(needs.prepare.outputs.matrix)) != '' }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    container:
      image: ${{ matrix.image }}
      options: --hostname ${{ inputs.hostname }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: Print matrix info
        run: |
          echo "================= Build Matrix Info ================="
          printf "%-10s | %s\n" "PKG"     "${{ matrix.pkg }}"
          printf "%-10s | %s\n" "VERSION" "${{ matrix.version }}"
          printf "%-10s | %s\n" "RELEASE" "${{ matrix.release }}"
          printf "%-10s | %s\n" "DISTRO"  "${{ matrix.distro }}"
          printf "%-10s | %s\n" "BRANCH"  "${{ matrix.branch }}"
          printf "%-10s | %s\n" "IMAGE"   "${{ matrix.image }}"
          echo "====================================================="

      - name: Setup basic environment
        run: |
          if command -v dnf > /dev/null; then
            # util-linux to get /usr/bin/su
            dnf install -y findutils util-linux tar git gzip
          else
            zypper --non-interactive ref
            # busybox often introduces dependency conflicts
            zypper --non-interactive addlock busybox busybox-less
            # for whatever reason, dnf not work when using libcurl-mini4 instead of libcurl4
            zypper --non-interactive install findutils libcurl4 util-linux tar git gzip
          fi

      - name: Checkout tools repository
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.tools-repo }}
          path: tools
          fetch-depth: 1
          token: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}

      - name: Checkout SPECs repository
        uses: actions/checkout@v5
        with:
          path: specs
          fetch-depth: 1

      - name: Setup build user
        id: setup-user
        run: |
          if [ "$(id -u)" -eq 0 ]; then
            build_user=builder
            # Setup user as builder
            if ! id -u builder >/dev/null 2>&1; then
              echo "User builder does not exist, creating..."
              useradd -m builder
            else
              echo "User builder already exists. This user will be used"
            fi
          else
              echo "The current user is non-root user $(whoami), who will be used for building"
              build_user=$(whoami)
          fi

          build_user_home=$(grep "^$build_user:" /etc/passwd | cut -d: -f6)

          echo "build-user=$build_user" >> $GITHUB_OUTPUT
          echo "build-user-home=$build_user_home" >> $GITHUB_OUTPUT

      - name: Cache prebuild yq
        uses: actions/cache@v4
        with:
          path: yq
          key: yq-amd64-4.47.1

      - name: Setup yq
        run: |
          if [ ! -f yq ]; then
            curl -Lo yq https://github.com/mikefarah/yq/releases/download/v4.47.1/yq_linux_amd64
          fi
          echo '0fb28c6680193c41b364193d0c0fc4a03177aecde51cfc04d506b1517158c2fb  yq' | sha256sum -c
          install -m 755 yq /usr/bin/yq

      - name: Run pre hooks
        run: |
          tools/scripts/hook -p specs/${{ inputs.root-dir }}/${{ matrix.pkg }} -g specs/${{ inputs.hooks-dir }} -d ${{ matrix.distro }} -b ${{ matrix.branch }} -t prebuild -e

      - name: Download sources
        run: |
          mkdir -p specs/${{ inputs.root-dir }}/${{ matrix.pkg }}/source
          tools/scripts/download -p specs/${{ inputs.root-dir }}/${{ matrix.pkg }}

      - name: Setup build tree
        id: setup-tree
        env:
          BUILD_USER: ${{ steps.setup-user.outputs.build-user }}
          BUILD_USER_HOME: ${{ steps.setup-user.outputs.build-user-home }}
        run: |
          su - $BUILD_USER -s /usr/bin/bash << 'EOF'
            set -e
            echo '%_topdir  %(echo $HOME)/rpmbuild' >> ~/.rpmmacros
            echo '%debug_package %{nil}' >> ~/.rpmmacros
            echo '%source_date_epoch_from_changelog %{nil}' >> ~/.rpmmacros
            rpmdev-setuptree
          EOF

          echo "topdir=$BUILD_USER_HOME/rpmbuild" >> $GITHUB_OUTPUT

      - name: Build RPM
        env:
          BUILD_USER: ${{ steps.setup-user.outputs.build-user }}
        run: |
          cp -v specs/${{ inputs.root-dir }}/${{ matrix.pkg }}/${{ matrix.pkg }}.spec ${{ steps.setup-tree.outputs.topdir }}/SPECS
          cp -v specs/${{ inputs.root-dir }}/${{ matrix.pkg }}/source/* ${{ steps.setup-tree.outputs.topdir }}/SOURCES
          chown -R $BUILD_USER ${{ steps.setup-tree.outputs.topdir }}

          su - $BUILD_USER -s /usr/bin/bash << 'EOF'
            set -e
            echo "Running build as user [$(whoami)], $(id)"
            mkdir -vp ~/BUILD_RPMS/x86_64
            mkdir -vp ~/BUILD_RPMS/noarch

            # Build RPMs
            # also copy SRPMs if build
            if [[ ${{ inputs.build-srpm }} == true ]]; then
              rpmbuild -ba ${{ steps.setup-tree.outputs.topdir }}/SPECS/${{ matrix.pkg }}.spec

              mkdir -vp ~/BUILD_SRPMS
              find ${{ steps.setup-tree.outputs.topdir }}/SRPMS -type f -name "*.rpm" ! -name "*debugsource*" ! -name "*debuginfo*" -exec cp -v {} ~/BUILD_SRPMS \;
            else
              rpmbuild -bb ${{ steps.setup-tree.outputs.topdir }}/SPECS/${{ matrix.pkg }}.spec
            fi

            # copy RPMs for later operations
            if [ -d ${{ steps.setup-tree.outputs.topdir }}/RPMS/x86_64 ]; then
              find ${{ steps.setup-tree.outputs.topdir }}/RPMS/x86_64 -type f -name "*.rpm" ! -name "*debugsource*" ! -name "*debuginfo*" -exec cp -v {} ~/BUILD_RPMS/x86_64 \;
            fi

            if [ -d ${{ steps.setup-tree.outputs.topdir }}/RPMS/noarch ]; then
              find ${{ steps.setup-tree.outputs.topdir }}/RPMS/noarch -type f -name "*.rpm" ! -name "*debugsource*" ! -name "*debuginfo*" -exec cp -v {} ~/BUILD_RPMS/noarch \;
            fi
          EOF

      - name: Run post hooks
        run: |
          tools/scripts/hook -p specs/${{ inputs.root-dir }}/${{ matrix.pkg }} -g specs/${{ inputs.hooks-dir }} -d ${{ matrix.distro }} -b ${{ matrix.branch }} -t postbuild -e

      - name: Setup GPG
        id: import-key
        env:
          GPG_SECRET: ${{ secrets.GPG_SECRET }}
        run: |
          if command -v gpg > /dev/null; then
            echo "GPG is already in PATH"
          else
            if dnf list available gpg2; then
              dnf install gpg2
            elif dnf list available gnupg2; then
              dnf install gnupg2
            elif dnf list available gnupg; then
              dnf install gnupg
            elif dnf list available gpg; then
              dnf install gpg
            else
              echo "Error: can't install GPG"
              exit 1
            fi
          fi

          echo ">>> Importing GPG key"
          echo "$GPG_SECRET" | base64 -d | gpg --import --batch --yes
          FINGERPRINT=$(gpg --list-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')
          echo ">>> Fingerprint: $FINGERPRINT"
          echo "id=$FINGERPRINT" >> $GITHUB_OUTPUT

      - name: Sign RPM
        env:
          GPG_SECRET_ID: ${{ steps.import-key.outputs.id }}
          BUILD_SRPM: ${{ inputs.build-srpm }}
          BUILD_USER_HOME: ${{ steps.setup-user.outputs.build-user-home }}
        run: |
          find "$BUILD_USER_HOME/BUILD_RPMS/x86_64" -name "*.rpm" -type f -exec rpmsign --addsign {} --define "_gpg_name $GPG_SECRET_ID" \;
          find "$BUILD_USER_HOME/BUILD_RPMS/noarch" -name "*.rpm" -type f -exec rpmsign --addsign {} --define "_gpg_name $GPG_SECRET_ID" \;

          if [ "$BUILD_SRPM" == true ]; then
            rpmsign --addsign $BUILD_USER_HOME/BUILD_SRPMS/*.rpm --define "_gpg_name $GPG_SECRET_ID"
          fi

          gpg --batch --yes --delete-secret-keys "$GPG_SECRET_ID"

      - name: Cache prebuild Rclone rpm
        uses: actions/cache@v4
        with:
          path: rclone.rpm
          key: rclone-rpm-1.71.0

      - name: Setup Rclone
        run: |
          if [ ! -f rclone.rpm ]; then
            curl -o rclone.rpm https://downloads.rclone.org/v1.71.0/rclone-v1.71.0-linux-amd64.rpm
          fi

          echo '7dcae58067ee30da79fe0be06fcdc0c7b163aa23d13fd3c54043a3288ade75cc  rclone.rpm' | sha256sum -c
          rpm -i rclone.rpm
          mkdir -vp ~/.config/rclone

      - name: Upload to repo
        env:
          RCLONE_CONFIG_SECTION: ${{ secrets.RCLONE_CONFIG_SECTION }}
          RCLONE_REPO_NAME: ${{ inputs.rclone-repo-name }}
          BUILD_SRPM: ${{ inputs.build-srpm }}
          BUILD_USER_HOME: ${{ steps.setup-user.outputs.build-user-home }}
        run: |
          echo "$RCLONE_CONFIG_SECTION" | base64 -d > ~/.config/rclone/rclone.conf

          # rclone copy takes the 2nd argument as the target directory
          # It recursively creates it if it doesn't exist
          # So, we just copy it
          rclone copy $BUILD_USER_HOME/BUILD_RPMS/x86_64 ${RCLONE_REPO_NAME}:/${{ matrix.distro }}/${{ matrix.branch }}/x86_64 --progress
          rclone copy $BUILD_USER_HOME/BUILD_RPMS/noarch ${RCLONE_REPO_NAME}:/${{ matrix.distro }}/${{ matrix.branch }}/noarch --progress

          if [ "$BUILD_SRPM" == true ]; then
            rclone copy $BUILD_USER_HOME/BUILD_SRPMS ${RCLONE_REPO_NAME}:/${{ matrix.distro }}/${{ matrix.branch }}/source --progress
          fi

          shred -u ~/.config/rclone/rclone.conf

      - name: Clean environment
        if: always()
        env:
          GPG_SECRET_ID: ${{ steps.import-key.outputs.id }}
        run: |
          test -e ~/.config/rclone/rclone.conf && shred -u ~/.config/rclone/rclone.conf
          gpg --batch --yes --delete-secret-keys "$GPG_SECRET_ID" || true

  gen-metadata:
    needs: build
    if: always() && needs.build.result != 'skipped'
    runs-on: ubuntu-24.04
    steps:
      - name: Trigger repodata update
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ${{ inputs.metadata-workflow-name }}
