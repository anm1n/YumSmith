name: Auto build rpm
on:
  workflow_call:
    inputs:
      pkg-path:
        description: "A relative path where can found spec files"
        required: true
        type: string
      rclone-repo-name:
        description: "Section name of the yum repository in Rclone"
        required: false
        type: string
        default: remote
      metadata-workflow-name:
        required: true
        type: string

    secrets:
      RCLONE_CONFIG_SECTION:
        description: "Extract from the rclone.conf file content, only the repository section is needed"
        required: true
      GPG_SECRET:
        required: true
      GPG_SECRET_ID:
        required: true
      TOKEN:
        required: false

jobs:
  job1:
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed:latest
      options: --hostname Build-Test

    steps:
      - name: Setup git, jq
        run: |
          zypper --non-interactive refresh
          zypper --non-interactive install git jq

      - name: Setup rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG_SECTION }}
        run: |
          zypper --non-interactive install rclone
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: Checkout tools repository
        uses: actions/checkout@v5
        with:
          repository: anm1n/yum2
          path: tools
          fetch-depth: 1
          token: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}

      - name: Checkout SPECs repository
        uses: actions/checkout@v5
        with:
          path: specs
          fetch-depth: 1

      - name: Pull list.json
        env:
          RCLONE_REPO_NAME: ${{ inputs.rclone-repo-name }}
        run: |
          if rclone ls ${RCLONE_REPO_NAME}:/repodata/list.json ; then rclone copy ${RCLONE_REPO_NAME}:/repodata/list.json . && mv list.json lock.json; else echo '{}' > lock.json; fi

      - name: Check NVR
        run: tools/scripts/nvrop check

      - name: Setup basic build dependency
        if: ${{ env.NEED_BUILD == 'true' }}
        run: |
          zypper --non-interactive install make rpm-build rpmdevtools pattern:devel_basis createrepo_c

      - name: Build rpms
        if: ${{ env.NEED_BUILD == 'true' }}
        run: tools/scripts/build

      - name: Setup gpg
        if: ${{ env.NEED_BUILD == 'true' }}
        env: 
          GPG_SEC: ${{ secrets.GPG_SECRET }}
        run: |
          zypper --non-interactive install gpg2
          echo "▶️ 导入GPG Key"
          echo "$GPG_SEC" | gpg --import --batch --yes

      - name: Sign rpms
        if: ${{ env.NEED_BUILD == 'true' }}
        env:
          GPG_SEC_ID: ${{ secrets.GPG_SECRET_ID }}
        run: |
          find "/usr/src/packages/RPMS" -type f -name "*.rpm" -exec rpmsign --addsign {} --define "_gpg_name $GPG_SEC_ID" \;

      - name: Push rpms
        if: ${{ env.NEED_BUILD == 'true' }}
        env:
          RCLONE_REPO_NAME: ${{ inputs.rclone-repo-name }}
        run: |
          find "/usr/src/packages/RPMS/x86_64" -type f -name "*.rpm" ! -name "*debugsource*" ! -name "*debuginfo*" -exec rclone copy {} ${RCLONE_REPO_NAME}:/x86_64 --progress \;
          find "/usr/src/packages/RPMS/noarch" -type f -name "*.rpm" ! -name "*debugsource*" ! -name "*debuginfo*" -exec rclone copy {} ${RCLONE_REPO_NAME}:/noarch --progress \;

      - name: Trigger metadata update
        if: ${{ env.NEED_BUILD == 'true' }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ${{ inputs.metadata-workflow-name }}
